/*
Given a string s, cut s into some substrings such that every substring is a palindrome.
Return the minimum cuts needed for a palindrome partitioning of s.
"aabbabb" = aa &  bbabb  cut = 1;
*/

public int minCuts(String input) {
    // input is not null.
    char[] array = input.toCharArray();
    int len = array.length;
    if (len == 0) {
      return 0;
    }
    boolean[][] isP = new boolean[len + 1][len + 1];
    int[] minCuts = new int[len + 1];
    for (int end = 1; end <= len; end++) {
      minCuts[end] = end;
      for (int start = end; start >= 1; start--) {
        if (start == end) {
          isP[start][end] = true;
        } else if (start == end - 1) {
          isP[start][end] = array[start - 1] == array[end - 1];
        } else {
          isP[start][end] = array[start - 1] == array[end - 1] ? isP[start + 1][end - 1] : false;
        }
        if (isP[start][end]) {
          minCuts[end] = Math.min(minCuts[end], 1 + minCuts[start - 1]);
        }
      }
    }
    return minCuts[len] - 1;
  }
}
